var t=require("minimist"),e=require("debug"),r=require("path"),s=require("fs");function a(t){return t&&t.__esModule?t.default:t}function o(t,e,r,s){Object.defineProperty(t,e,{get:r,set:s,enumerable:!0,configurable:!0})}o(module.exports,"isSupportedFileExtension",(()=>i)),o(module.exports,"exists",(()=>c)),o(module.exports,"parseArguments",(()=>l)),o(module.exports,"simpleProjectRootDir",(()=>u));const n=a(e)("@aakoch:utils");function i(t){return n("isSupportedFileExtension(): fileExtWithDot="+t),".pug"==t.toLowerCase()||".foo-dog"==t.toLowerCase()}function c(t){try{return a(s).accessSync(t),!0}catch(t){return!1}}async function l(e,o){const i=a(t)(e.argv.slice(2));n("argv=",i);let c={in:{},out:{}};if(i.help||i.h)n("help option detected"),o(),e.exit();else if(0==i._.length)n("no arguments - using stdin and stdout"),c={in:{name:"stdin",createStream:()=>e.stdin},out:{name:"stdout",createStream:()=>e.stdout}};else if(1==i._.length){n("one argument - reading file and piping to stdout");try{a(s).accessSync(i._[0],a(s).constants.R_OK)}catch(t){throw new Error(`Could not ${t.syscall} "${t.path}"`)}n("creating read stream for "+(null==i?void 0:i._[0])),c={in:{name:i._[0],createStream:()=>a(s).createReadStream(i._[0])},out:{name:"stdout",createStream:()=>e.stdout},override:i.f}}else{if(n("two or more arguments"),"-"==i._[0])n("first argument was - - using stdin"),c.in={name:"stdin",createStream:()=>e.stdin},n("Reading from stdin");else{const t=a(r).resolve(i._[0]);n(`first argument was ${i._[0]}. Resolved is ${t} - reading file`);try{a(s).accessSync(t,a(s).constants.R_OK),c.in={name:t,createStream:()=>a(s).createReadStream(t)}}catch(t){throw t.hasOwnProperty("syscall")?new Error(`Could not ${t.syscall} "${t.path}"`,{cause:t}):t}}if("-"==i._[1])n("second argument was - - using stdout"),c.out={name:"stdout",createStream:()=>e.stdout},console.log("writing to stdout");else{const t=a(r).resolve(i._[1]),e=a(r).dirname(t);n(`creating (if not already existing) ${e}`),a(s).mkdirSync(e,{recursive:!0}),n(`second argument was ${i._[1]}. Resolved ${t} - writing file`);try{c.out={name:t,createStream:()=>a(s).createWriteStream(t,{flags:"w"})}}catch(t){throw t.hasOwnProperty("syscall")?new Error(`Could not ${t.syscall} "${t.path}"`,{cause:t}):t}}}return i.hasOwnProperty("f")&&(c.override=i.f),i.hasOwnProperty("allow-digits-to-start-css-classes")?(c.allowDigitToStartClassName=!!i["allow-digits-to-start-css-classes"],n("ret.allowDigitToStartClassName=",c.allowDigitToStartClassName)):i.hasOwnProperty("allowDigitToStartClassName")&&(c.allowDigitToStartClassName=new Boolean(i.allowDigitToStartClassName),n("ret.allowDigitToStartClassName=",c.allowDigitToStartClassName)),c}function u(){const t=process.cwd();let e=!0;for(;e;)try{a(s).accessSync("package.json",a(s).constants.F_OK),e=!1}catch(t){process.chdir("..")}const r=process.cwd();return process.chdir(t),r}Array.prototype.peek=function(){return this[this.length-1]},String.prototype.removeFromEnd=function(t){return this.endsWith(t)?this.substring(0,this.lastIndexOf(t)):this.toString()};
//# sourceMappingURL=main.js.map
